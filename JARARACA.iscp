@model{id:"PyDevStandards", version:"0.1.b"}
@defs{
  P: "set of all Python principles",
  SOLID: "set of design principles {S,O,L,I,D}",
  S: "Single Responsibility Principle [one reason to change]",
  O: "Open-Closed Principle [open for extension, closed for modification]",
  L: "Liskov Substitution Principle [subtypes must be substitutable]",
  I: "Interface Segregation Principle [specific interfaces over general]",
  D: "Dependency Inversion Principle [depend on abstractions]",
  DP: "set of design patterns {Factory,Singleton,Decorator,...}",
  F(x): "file naming for entity x",
  C(x): "class naming for entity x",
  M(x): "method/function naming for entity x",
  V(x): "variable naming for entity x",
  K(x): "constant naming for entity x",
  P(x): "package naming for entity x",
  LOC(f): "lines of code in file f",
  LOF(fn): "lines of code in function fn",
  LM: "set of linting & maintenance tools",
  T: "set of testing approaches",
  COV(c): "code coverage percentage for codebase c",
  A: "set of asynchronous practices {create_task,gather,...}",
  EH: "set of error handling practices",
  SEC: "set of security practices",
  DEP: "set of dependency management practices",
  PERF: "set of performance practices",
  TOOL: "set of development tools {Black,flake8,mypy,...}",
  CI: "set of CI/CD practices",
  LC(x): "lifecycle of entity x",
  NS(x): "namespace of entity x"
}
@constraints{
  C1: "∀p∈SOLID: apply(p)=required [implement all SOLID principles]",
  C2: "F(file)=snake_case [snake_case for files]",
  C3: "C(class)=PascalCase [PascalCase for classes]",
  C4: "M(fn)=snake_case [snake_case for functions]",
  C5: "V(var)=snake_case [snake_case for variables]",
  C6: "K(const)=UPPER_CASE [uppercase for constants]",
  C7: "P(pkg)=snake_case [snake_case for packages]",
  C8: "F(file)≠generic → ¬contains('utils','helpers') [no generic file names]",
  C9: "LOC(f)≤300 ∨ generated(f)=true [max file length]",
  C10: "LOF(fn)≤50 [max function length]",
  C11: "import_order={std_lib→third_party→local} [import ordering]",
  C12: "∀f: docstring(f)=required ∧ follows(PEP257) [docstrings required]",
  C13: "∀fn: type_hints(fn)=required [type hints required]",
  C14: "string_interp=f_strings [use f-strings]",
  C15: "async_io→¬blocking_calls [no blocking calls in async]",
  C16: "COV(codebase)≥80% [minimum 80% test coverage]",
  C17: "∀t∈T: naming(t)='test_[unit]_[scenario]_[expected]' [test naming convention]",
  C18: "git_commit=conventional [use conventional commits]",
  C19: "logging=structured ∧ ¬log(sensitive_data) [structured logging, no sensitive data]",
  C20: "exceptions=specific ∧ ¬bare_except [specific exceptions]",
  C21: "secrets∉{code,version_control} [no secrets in code]",
  C22: "auth_pass=argon2 ∨ auth_pass=bcrypt [secure password hashing]",
  C23: "sql=parameterized [parameterized SQL queries]",
  C24: "external_comm=https [use HTTPS]",
  C25: "deps=pinned ∧ deps=regularly_updated [pin and update dependencies]",
  C26: "env=virtualized [use virtual environments]",
  C27: "optimization→profiling_first [profile before optimizing]"
}
@viz{
  type:"hierarchy",
  nodes:"Development Standards",
  nodeGroups:"Categories",
  nodeColor:"Implementation Complexity",
  nodeBorder:"Priority",
  edges:"Relationships",
  edgeType:"Dependency"
}
@algo{
  name:"PythonStandardsImplementation",
  1:"Setup dev environment with TOOL={venv,Black,flake8,mypy,pytest}",
  2:"Configure tool settings per project needs",
  3:"Implement pre-commit hooks for automated checks",
  4:"Design with SOLID principles first",
  5:"Apply naming conventions {F,C,M,V,K,P}",
  6:"Limit {LOC,LOF} per constraints",
  7:"Implement structured logging with proper levels",
  8:"Configure security practices SEC={env_vars,argon2,https}",
  9:"Setup testing with COV≥80%",
  10:"Configure CI pipeline with all checks",
  11:"Regularly update DEP",
  12:"Review code for conformance to all constraints"
}